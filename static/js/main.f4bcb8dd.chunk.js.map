{"version":3,"sources":["components/Chart.js","utils.js","apiClient.js","redux/store.js","redux/actions.js","components/Input.js","components/ErrorMsg.js","App.js","index.js"],"names":["Chart","data","className","width","height","dataKey","type","horizontal","fill","kelvinToCelsius","kelvin","Math","round","apiClient","axios","create","baseURL","SET_DATA","initialState","isError","msg","store","createStore","state","action","payload","composeWithDevTools","setData","Input","props","useState","city","setCity","dispatch","useDispatch","getWeather","get","then","res","hasOwnProperty","barChartData","list","filterData","result","name","values","date","forEach","item","index","moment","dt_txt","format","parseInt","push","main","map","day","minVal","sort","a","b","parseFloat","temp_min","maxVal","temp_max","minMaxValuesArr","normalizeData","isErro","catch","e","onSubmit","preventDefault","handleSubmit","autoComplete","value","placeholder","onChange","target","ErrorMsg","App","useSelector","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4bcb8dd.chunk.js","sourcesContent":["import React from 'react'\nimport {\n    BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid\n} from 'recharts';\n\nexport default function Chart({ data }) {\n    return (\n        <>\n            <div className=\"bar-chart-wrapper\">\n                <BarChart width={400} height={400} data={data} >\n                    <XAxis dataKey=\"name\" />\n                    <YAxis type=\"number\" />\n                    <CartesianGrid horizontal={false} />\n                    <Tooltip />\n                    <Bar dataKey=\"values\" fill=\"#8884d8\" />\n                </BarChart>\n            </div>\n\n        </>\n    )\n}\n","export const kelvinToCelsius = (kelvin) => {\n    return Math.round(kelvin - 273.15)\n}","import axios from 'axios';\n\nexport const apiClient = axios.create({\n    baseURL: 'http://api.openweathermap.org/data/2.5/'\n})","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const SET_DATA = 'SET_DATA';\n\nconst initialState = {\n    data: [],\n    isError: false,\n    msg: ''\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_DATA:\n            return { ...state, ...action.payload };\n        default: return state\n    }\n}\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;","import { SET_DATA } from './store'\n\nexport const setData = (data) => {\n    return {\n        type: SET_DATA,\n        payload: data\n    }\n}","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { kelvinToCelsius } from '../utils'\nimport { apiClient } from '../apiClient';\nimport { setData } from '../redux/actions';\nimport { useDispatch } from 'react-redux'\n\nexport default function Input(props) {\n    const [city, setCity] = useState('')\n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        getWeather(city)\n\n    }\n\n    const normalizeData = (list) => {\n        const filterData = [];\n        let result = { name: \"\", values: [] };\n        let date = \"\";\n        list.forEach((item, index) => {\n            date = moment(item.dt_txt).format(\"D\");\n\n            if (result.name === \"\") {\n                result.name = parseInt(date);\n                result.values.push(item.main);\n            } else {\n                if (result.name == date) {\n                    result.values.push(item.main);\n                    //check if last\n                    if (!list[index + 1]) {\n                        filterData.push({ ...result });\n                    }\n                }\n                if (result.name < date) {\n                    filterData.push({ ...result });\n                    result.name = \"\";\n                    result.values = [];\n                }\n            }\n        });\n        const chartBarDate = filterData.map((day) => {\n            const minVal = day.values.sort((a, b) => {\n                return parseFloat(a.temp_min) - parseFloat(b.temp_min);\n            })[0].temp_min;\n            const maxVal = day.values.sort((a, b) => {\n                return parseFloat(b.temp_max) - parseFloat(a.temp_max);\n            })[0].temp_max;\n\n            let minMaxValuesArr = [kelvinToCelsius(minVal), kelvinToCelsius(maxVal)];\n            return { name: day.name, values: minMaxValuesArr };\n        });\n        return chartBarDate\n    }\n\n    const getWeather = (city) => {\n        apiClient.get(`forecast?q=${city}&appid=df7065d3aeff74b31072ae05b0f5ba9f`)\n            .then((res) => {\n                if (res.data.hasOwnProperty('list')) {\n                    const list = res.data.list;\n                    const barChartData = normalizeData(list)\n                    //Set to the store \n                    dispatch(setData({ data: barChartData, isErro: false, msg: '' }))\n                }\n            })\n            .catch((e) => {\n                //No city was founded\n                dispatch(setData({ data: [], isError: true, msg: 'There is no city for your request' }))\n            })\n    }\n\n    const handleChange = (value) => {\n        setCity(value)\n    }\n\n    return (\n        <>\n            <form onSubmit={(e) => { handleSubmit(e) }}>\n                <input\n                    autoComplete=\"off\"\n                    type=\"text\"\n                    name=\"city\"\n                    value={city}\n                    placeholder={'City'}\n                    onChange={(e) => { handleChange(e.target.value) }} />\n                <button>search</button>\n            </form>\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function ErrorMsg({ msg }) {\n    return (\n        <>\n            <h2>{msg}</h2>\n        </>\n    )\n}\n","import React from 'react';\nimport Chart from './components/Chart';\nimport Input from './components/Input';\nimport ErrorMsg from './components/ErrorMsg'\nimport { useSelector } from 'react-redux'\n\n\nfunction App() {\n  const data = useSelector(state => state.data);\n  const isError = useSelector(state => state.isError);\n  const msg = useSelector(state => state.msg)\n  return (\n    <div className=\"App\">\n      <Input />\n      {data.length > 0 && <Chart data={data} />}\n      {isError && <ErrorMsg msg={msg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </ Provider>,\n    document.getElementById('root'));\n\n\n"],"sourceRoot":""}